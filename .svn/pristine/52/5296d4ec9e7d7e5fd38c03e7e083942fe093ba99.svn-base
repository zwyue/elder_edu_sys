package com.zrtjoa.controller;

import com.github.pagehelper.PageInfo;
import com.zrtjoa.common.BaseController;
import com.zrtjoa.common.ResultUtils;
import com.zrtjoa.entity.Identitys;
import com.zrtjoa.entity.Roster;
import com.zrtjoa.entity.StudentRecord;
import com.zrtjoa.entity.Teacher;
import com.zrtjoa.service.IdentityService;
import com.zrtjoa.service.RosterService;
import com.zrtjoa.service.StudentRecordService;
import com.zrtjoa.service.TermService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpSession;
import java.util.List;
import java.util.Map;

/**
 * 花名册管理
 * @author yangli
 * @date 2018/12/25
 */
@RestController
@RequestMapping("/roster")
public class RosterController extends BaseController {

    @Autowired
    private RosterService rosterService;

    @Autowired
    private IdentityService identityService;

    @Autowired
    private TermService termService;

    @Autowired
    private StudentRecordService recordService;

    /**
     * 查询花名册学生列表
     * @author yangli
     * @date 2018/12/26
     */
    @RequestMapping(value = "list",method = RequestMethod.GET)
    public Map list(HttpSession httpSession){
        Teacher teacher = getLoginUser(httpSession);
        String s = teacher.getClassid();
        String[] data = s.split(",");
        PageInfo<Roster> pageInfo=new PageInfo<Roster>(rosterService.getList(Integer.parseInt(data[0])));
        return ResultUtils.success(pageInfo);
    }

    /**
     * 根据班级查询学生列表
     * @author yangli
     * @date 2018/12/26
     */
    @RequestMapping(value = "query",method = RequestMethod.GET)
    public Map query(Integer classid){
        List<Roster> list = rosterService.getList(classid);
        return ResultUtils.success(list);
    }

    /**
     * 查询学生身份信息列表
     * @author yangli
     * @date 2018/12/26
     */
    @RequestMapping(value = "identity",method = RequestMethod.GET)
    public Map identity(){
        List<Identitys> list = identityService.getList();
        return ResultUtils.success(list);
    }

    /**
     * 设置班委会
     * @author yangli
     * @date 2018/12/26
     */
    @RequestMapping(value = "save",method = RequestMethod.POST)
    @ResponseBody
    public Map save(Integer classid,Roster roster){
        Roster rosters = rosterService.selectByIsleader(roster.getIsleader(),classid);
        if (roster==null){
            rosterService.updateByPrimaryKey(roster);
        }else{
            rosters.setIsleader("学生");
            rosterService.updateByPrimaryKey(rosters);
            rosterService.updateByPrimaryKey(roster);
        }
        return ResultUtils.success("设置成功");
    }

    /**
     * 查询职务是否已被设置
     * @author yangli
     * @date 2018/12/26
     */
    @RequestMapping(value = "jundge",method = RequestMethod.GET)
    public Map jundge(Integer classid,String duties){
        Roster roster = rosterService.selectByIsleader(duties,classid);
        if (roster==null){
            return ResultUtils.success("职务已存在");
        }else{
            return ResultUtils.success("未查询到职务");
        }
    }

    @RequestMapping(value = "conversion")
    @ResponseBody
    public Map Conversion(Integer termid,Integer classid){
        //termid=1;
        //classid=4;
        List<StudentRecord> slist = recordService.getList(termid, classid);
        List<Roster> rlist = rosterService.getList(classid);
        if (slist.size()>0){
            for (int i = 0; i < slist.size(); i++) {
                 recordService.deleteMany(slist.get(i).getId());
            }
        }
        recordService.insertList(rlist);
        return ResultUtils.success("转入到学籍成功");
    }

}
