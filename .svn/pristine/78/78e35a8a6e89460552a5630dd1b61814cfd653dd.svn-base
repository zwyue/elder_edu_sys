package com.zrtjoa.service.impl;

import com.zrtjoa.dao.RoleDao;
import com.zrtjoa.entity.Power;
import com.zrtjoa.entity.Role;
import com.zrtjoa.entity.Teacher;
import com.zrtjoa.enums.StatusEnum;
import com.zrtjoa.service.PowerService;
import com.zrtjoa.service.RoleService;
import com.zrtjoa.service.TeacherService;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.*;

import static com.zrtjoa.constant.SysConstant.INIT_PASSWORD;
import static com.zrtjoa.constant.SysConstant.LOGIN_POWER;
import static com.zrtjoa.constant.SysConstant.Punctuation.COMMA;

/**
 * RoleServiceImpl class
 *
 * @author admin
 * @date 2018/11/23 11:31
 */
@Service
public class RoleServiceImpl implements RoleService {

    private final static Logger logger = LoggerFactory.getLogger(ResourceServiceImpl.class);

    @Autowired
    private RoleDao roleDao ;

    @Autowired
    private TeacherService teacherService ;

    @Autowired
    private PowerService powerService ;

    @Override
    public List<Role> queryRoleByUserId(Long id) {

        List<Role> roles = new ArrayList<Role>() ;
        Role role = new Role();
        role.setId(1);
        role.setRolename("教务处");
        roles.add(role);

        role = new Role();
        role.setId(2);
        role.setRolename("普通教师");
        roles.add(role);

        return roles;
    }

    @Override
    public List<Role> queryRoleByRoleIds(List<String> roleList) {
        return roleDao.queryRoleByRoleIds(roleList);
    }

    @Override
    public List<Role> queryRole() {
        List<Role> roles = roleDao.roleList();
        roles.forEach(role -> role.setStatusTxt(StatusEnum.returnEnumByCode(role.getStatus()).msg));
        return roles;
    }

    @Override
    public Integer createNewRole(Role role) {
        return roleDao.insertSelective(role);
    }

    @Override
    public Integer allocateRole(Integer userId, Integer roleId) {
        //根据登陆权限名称获取登陆权限
        Power loginPower = powerService.queryPowerByPowerName(LOGIN_POWER);
        //根据用户id查询用户
        Teacher teacher = teacherService.queryTeacherById(userId);
        //根据角色id查询角色
        Role role = roleDao.selectByPrimaryKey(roleId);

        boolean hasLoginType = false ;

        if(StringUtils.isBlank(teacher.getRoleid())){
            if(loginPower!=null){
                hasLoginType = StringUtils.isNotBlank(role.getPowerid())?role.getPowerid().contains(loginPower.getId().toString()):false ;
            }
            teacher.setRoleid(roleId.toString());

        }else {
            //当前分配的角色是否已包含在用户已有角色中
            if(teacher.getRoleid().contains(roleId.toString())){
                return 0 ;
            }else {
                List<Role> roles = roleDao.queryRoleByRoleIds(Arrays.asList(teacher.getRoleid().split(COMMA)));
                if(!hasLoginType){
                    for(Role ro:roles){
                        if(StringUtils.isNotBlank(ro.getPowerid())){

                            if(ro.getPowerid().contains(loginPower.getId().toString())){
                                hasLoginType = true ;
                                break;
                            }
                        }
                    }
                }
                teacher.setRoleid(teacher.getRoleid() + COMMA + roleId.toString());
            }
        }
        //用户是否无初始密码且当前分配的角色含有登陆权限
        if(StringUtils.isBlank(teacher.getPassword())&&hasLoginType){
            teacher.setPassword(INIT_PASSWORD);
        }
        return teacherService.updateTeacher(teacher);
    }
}
